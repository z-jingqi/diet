// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ================================================= //
//                 AUTHENTICATION                    //
// ================================================= //

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  username      String?          @unique
  password      String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  favorites     RecipeFavorite[]
}

// ================================================= //
//                 APPLICATION MODELS                //
// ================================================= //

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  role           String       // "system", "user", or "assistant"
  parts          Json         // Array of UIMessagePart (text, reasoning, tool, file, etc.)
  metadata       Json?        // Optional metadata (intent, hasRecipe, modelName, etc.)
  createdAt      DateTime     @default(now())
  conversationId String
  recipeId       String?      @unique
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  recipe         Recipe?      @relation("MessageRecipe", fields: [recipeId], references: [id], onDelete: SetNull)
}

model Recipe {
  id              String            @id @default(cuid())
  title           String
  description     String?
  ingredients     Json?
  steps           Json?
  prepTimeMinutes Int?
  cookTimeMinutes Int?
  servings        Int?
  difficulty      RecipeDifficulty?
  tags            Json?
  sourceUrl       String?
  favoriteCount   Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  message         Message?          @relation("MessageRecipe")
  favorites       RecipeFavorite[]
}

model RecipeFavorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}
