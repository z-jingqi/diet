---
description: 
globs: 
alwaysApply: true
---
# üèóÔ∏è Project Architecture & Organization

## Directory Structure
- `/src/components` - Reusable UI components
- `/src/features` - Feature-specific components and logic
- `/src/hooks` - Custom React hooks
- `/src/lib` - Utility functions and shared logic
- `/src/types` - TypeScript type definitions
- `/src/styles` - Global styles and Tailwind configuration
- `/src/stories` - Storybook stories
- `/src/mocks` - Mock data and API responses

## File Naming
- Use `PascalCase` for component files: `Button.tsx`, `UserProfile.tsx`
- Use `camelCase` for hooks: `useAuth.ts`, `useForm.ts`
- Use `kebab-case` for utility files: `format-date.ts`, `validate-email.ts`
- Use `kebab-case` for style files: `button-styles.css`, `theme-variables.css`
- Use `kebab-case` for test files: `button.test.tsx`, `user-profile.test.tsx`
- Use `kebab-case` for story files: `button.stories.tsx`, `user-profile.stories.tsx`

## Component Organization
- One component per file
- Co-locate related files (styles, tests, stories)
- Keep components focused and single-responsibility
- Use index files for clean exports

## Code Splitting
- Use dynamic imports for route-based code splitting
- Lazy load heavy components
- Implement proper loading states and error boundaries

## State Management
- Use Zustand for global state
- Prefer local state with useState when possible
- Use React Query for server state
- Implement proper loading and error states
