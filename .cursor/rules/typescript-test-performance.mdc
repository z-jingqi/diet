---
description: 
globs: *.tsx,*.ts
alwaysApply: false
---
---
description: TypeScript strictness, testing, animations, performance, and forms
globs: ["src/**/*.{ts,tsx}"]
alwaysApply: false
---

# 🧭 TypeScript, Testing & Performance

## TypeScript
- Enable strict mode in `tsconfig.json`
- Use interfaces for object types
- Use `satisfies` operator for type inference
- Avoid `any` and `enum`
- Use `as const` for literal types
- Use proper type guards
- Document complex types with JSDoc

## Testing
- Use React Testing Library + Vitest
- Aim for ≥80% test coverage
- Test user interactions and accessibility
- Use proper test data and mocks
- Test error states and edge cases
- Use proper test descriptions
- Implement proper test isolation

## Performance
- Use `React.memo` for expensive renders
- Implement proper `useMemo` and `useCallback`
- Use `React.lazy` for code splitting
- Optimize images and assets
- Implement proper loading states
- Use proper caching strategies
- Monitor and optimize bundle size

## Forms
- Use react-hook-form for form handling
- Implement proper validation with Zod
- Use proper error messages
- Handle form submission states
- Implement proper field validation
- Use proper form accessibility
- Handle form reset and cleanup

## Code Style
- Always use block statements for control flow statements (if, for, while, etc.)
- Avoid single-line control flow statements without braces
- Examples:
  ```typescript
  // ❌ Avoid
  if (condition) return null;
  if (condition) continue;
  if (condition) break;
  if (condition) throw new Error();
  for (const item of items) process(item);
  while (condition) doSomething();
  do something() while (condition);
  
  // ✅ Prefer
  if (condition) {
    return null;
  }
  
  if (condition) {
    continue;
  }
  
  if (condition) {
    break;
  }
  
  if (condition) {
    throw new Error();
  }
  
  for (const item of items) {
    process(item);
  }
  
  while (condition) {
    doSomething();
  }
  
  do {
    something();
  } while (condition);
  ```
- This improves code readability and prevents potential bugs when adding more statements
- Exception: Arrow functions can use implicit returns for simple expressions
  ```typescript
  // ✅ Allowed
  const double = (x: number) => x * 2;
  
  // ✅ Also allowed
  const double = (x: number) => {
    return x * 2;
  };
  ```
